trigger:
  branches:
    include:
      - main        # automatic on every merge to main

variables:
  azureServiceConn: 'project-connection'      # name of the ARM service connection
  tfWorkingDir: '$(System.DefaultWorkingDirectory)/terraform'
  location: 'East US'
  resourceGroup: 'monitoring-rg'

pool:
  vmImage: 'ubuntu-latest'

stages:
# ─────────────────────────────────────────────────────
- stage: Terraform
  displayName: 'Init → Plan → Apply'
  jobs:
  - job: DeployMonitoring
    displayName: 'Provision monitoring stack'
    steps:

    # 1) Checkout repo
    - checkout: self

    # 2) Install Terraform (hosted agent has 1.7+, but pin if you prefer)
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'

    # 3) Terraform Init
    - task: TerraformCLI@1
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(tfWorkingDir)'
        backendType: 'azurerm'
        ensureBackend: false        # we defined backend in providers.tf
        environmentServiceName: '$(azureServiceConn)'

    # 4) Terraform Plan (creates plan.out artifact)
    - task: TerraformCLI@1
      displayName: 'terraform plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(tfWorkingDir)'
        environmentServiceName: '$(azureServiceConn)'
        commandOptions: |
          -input=false
          -var="location=$(location)"
          -var="resource_group_name=$(resourceGroup)"
          -var="action_group_email=alerts@example.com"
        secureVarsFile: ''
        publishPlanResults: 'plan'

    # 5) Manual approval gate (recommended)
    #    Project Settings → Environments → New 'monitoring' →
    #    require approval before deployment
    - task: TerraformCLI@1
      displayName: 'terraform apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(tfWorkingDir)'
        environmentServiceName: '$(azureServiceConn)'
        commandOptions: |
          -auto-approve
          -input=false
          -var="location=$(location)"
          -var="resource_group_name=$(resourceGroup)"
          -var="action_group_email=alerts@example.com"
