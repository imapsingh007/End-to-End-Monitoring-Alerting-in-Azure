trigger:
  branches:
    include:
      - main                           # CI on every push to main

variables:
  azureServiceConn: 'project-connection'        # ARM service‑connection name
  tfWorkingDir: '$(System.DefaultWorkingDirectory)/terraform'
  location: 'East US'
  resourceGroup: 'monitoring-rg'
  tfVersion: '1.8.4'                            # pin a stable version

pool:
  vmImage: 'ubuntu-latest'

stages:
# ─────────────────────────────────────────────────────
- stage: Terraform
  displayName: 'Init → Plan → Apply'
  jobs:
  - job: DeployMonitoring
    displayName: 'Provision monitoring stack'
    steps:

    # 1️⃣ Checkout repo
    - checkout: self

    # 2️⃣ Install the exact Terraform version once for the whole job
    - task: TerraformInstaller@1
      displayName: 'Install Terraform $(tfVersion)'
      inputs:
        terraformVersion: '$(tfVersion)'

    # (optional) quick sanity check
    - bash: terraform -version
      displayName: 'Show Terraform version'

    # 3️⃣ terraform init
    - task: TerraformCLI@1
      displayName: 'terraform init'
      inputs:
        command: 'init'
        workingDirectory: '$(tfWorkingDir)'
        backendType: 'azurerm'
        environmentServiceName: '$(azureServiceConn)'
        allowTelemetryCollection: false          # quiet‑mode

    # 4️⃣ terraform plan  (plan file published as an artifact)
    - task: TerraformCLI@1
      displayName: 'terraform plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(tfWorkingDir)'
        environmentServiceName: '$(azureServiceConn)'
        commandOptions: |
          -input=false
          -var="location=$(location)"
          -var="resource_group_name=$(resourceGroup)"
          -var="action_group_email=alerts@example.com"
        publishPlanResults: 'plan'               # inspect diff in UI

    # 5️⃣ (optional) manual approval gate → configure in “Environments”
    # ---------------------------------------------------------------

    # 6️⃣ terraform apply
    - task: TerraformCLI@1
      displayName: 'terraform apply'
      inputs:
        command: 'apply'
        workingDirectory: '$(tfWorkingDir)'
        environmentServiceName: '$(azureServiceConn)'
        commandOptions: |
          -auto-approve -input=false \
          -var="location=$(location)" \
          -var="resource_group_name=$(resourceGroup)" \
          -var="action_group_email=alerts@example.com"
